coord_cartesian(xlim =c(-300,300))
## Diff_ML_Last_Beta: Visualize residuals on forecasting day 1:
df_forecasts %>%
filter(day_num == 1) %>%
ggplot() +
geom_histogram(aes(x=residuals_Diff_Eq_Ml_Beta),
binwidth = 1) +
xlim(-1000,1000) +
coord_cartesian(xlim =c(-60,60))
### ML-Beta
## Diff_ML_Last_Beta: Visualize residuals on forecasting day 14:
df_forecasts %>%
filter(day_num == 14) %>%
ggplot() +
geom_histogram(aes(x=residuals_Diff_Eq_ML_Beta),
binwidth = 5) +
xlim(-1000,1000) +
coord_cartesian(xlim =c(-300,300))
## Diff_ML_Last_Beta: Visualize residuals on forecasting day 1:
df_forecasts %>%
filter(day_num == 1) %>%
ggplot() +
geom_histogram(aes(x=residuals_Diff_Eq_ML_Beta),
binwidth = 1) +
xlim(-1000,1000) +
coord_cartesian(xlim =c(-60,60))
### ML-Beta
## Diff_ML_Last_Beta: Visualize residuals on forecasting day 14:
df_forecasts %>%
filter(day_num == 14) %>%
ggplot() +
geom_histogram(aes(x=residuals_Diff_Eq_ML_Beta),
binwidth = 5) +
xlim(-1000,1000) +
coord_cartesian(xlim =c(-300,300))
### Last_Beta
## Diff_Eq_Last_Beta: Visualize residuals on forecasting day 14:
df_forecasts %>%
filter(day_num == 14) %>%
ggplot() +
geom_histogram(aes(x=residuals_Diff_Eq_Last_Beta),
binwidth = 5) +
xlim(-1000,1000) +
coord_cartesian(xlim =c(-300,300))
## Diff_Eq_Last_Beta: Visualize residuals on forecasting day 1:
df_forecasts %>%
filter(day_num == 1) %>%
ggplot() +
geom_histogram(aes(x=residuals_Diff_Eq_Last_Beta),
binwidth = 1) +
xlim(-1000,1000) +
coord_cartesian(xlim =c(-60,60))
## Diff_Eq_Last_Beta: Visualize average absolute residuals per day:
df_forecasts %>%
group_by(day_num) %>%
summarise(
perc_20_quantile_residual = quantile(residuals_Diff_Eq_Last_Beta, 0.2),
average_residual = mean(residuals_Diff_Eq_Last_Beta),
perc_80_quantile_residual = quantile(residuals_Diff_Eq_Last_Beta, 0.8),
) %>%
ggplot() +
geom_line(aes(x=day_num, y=perc_20_quantile_residual), linetype='dashed', size=1, color='darkgreen') +
geom_line(aes(x=day_num, y=average_residual), size=2, color='darkgreen') +
geom_line(aes(x=day_num, y=perc_80_quantile_residual), linetype='dashed', size=1, color='darkgreen') +
ggtitle("Residuals", subtitle='Differential Equation Last Beta') +
labs(y = "Absolute Residual", x="Day", fill='Anruf Empfehlung') +
theme(text = element_text(size = 12), legend.position = "right")
## Diff_Eq_Ml_Beta: Visualize average absolute residuals per day:
df_forecasts %>%
group_by(day_num) %>%
summarise(
perc_20_quantile_residual = quantile(residuals_Diff_Eq_ML_Beta, 0.2),
average_residual = mean(residuals_Diff_Eq_Last_Beta),
perc_80_quantile_residual = quantile(residuals_Diff_Eq_ML_Beta, 0.8),
) %>%
ggplot() +
geom_line(aes(x=day_num, y=perc_20_quantile_residual), linetype='dashed', size=1, color='darkgreen') +
geom_line(aes(x=day_num, y=average_residual), size=2, color='darkgreen') +
geom_line(aes(x=day_num, y=perc_80_quantile_residual), linetype='dashed', size=1, color='darkgreen') +
ggtitle("Residuals", subtitle='Differential Equation Last Beta') +
labs(y = "Absolute Residual", x="Day", fill='Anruf Empfehlung') +
theme(text = element_text(size = 12), legend.position = "right")
## Diff_Eq_Ml_Beta: Visualize average absolute residuals per day:
df_forecasts %>%
group_by(day_num) %>%
summarise(
perc_20_quantile_residual = quantile(residuals_Diff_Eq_ML_Beta, 0.2),
average_residual = mean(residuals_Diff_Eq_Last_Beta),
perc_80_quantile_residual = quantile(residuals_Diff_Eq_ML_Beta, 0.8),
) %>%
ggplot() +
geom_line(aes(x=day_num, y=perc_20_quantile_residual), linetype='dashed', size=1, color='darkgreen') +
geom_line(aes(x=day_num, y=average_residual), size=2, color='darkgreen') +
geom_line(aes(x=day_num, y=perc_80_quantile_residual), linetype='dashed', size=1, color='darkgreen') +
ggtitle("Residuals", subtitle='Differential Equation ML Beta') +
labs(y = "Absolute Residual", x="Day", fill='Anruf Empfehlung') +
theme(text = element_text(size = 12), legend.position = "right")
## Diff_Eq_Ml_Beta: Visualize average absolute residuals per day:
df_forecasts %>%
group_by(day_num) %>%
summarise(
perc_20_quantile_residual = quantile(residuals_Diff_Eq_ML_Beta, 0.2),
average_residual = mean(residuals_Diff_Eq_Last_Beta),
perc_80_quantile_residual = quantile(residuals_Diff_Eq_ML_Beta, 0.8),
) %>%
ggplot() +
geom_line(aes(x=day_num, y=perc_20_quantile_residual), linetype='dashed', size=1, color='darkgreen') +
geom_line(aes(x=day_num, y=average_residual), size=2, color='darkgreen') +
geom_line(aes(x=day_num, y=perc_80_quantile_residual), linetype='dashed', size=1, color='darkgreen') +
ggtitle("Residuals", subtitle='Differential Equation ML Beta') +
labs(y = "Absolute Residual", x="Day", fill='Anruf Empfehlung') +
theme(text = element_text(size = 12), legend.position = "right")
View(df_forecasts)
View(df_forecasts)
View(df_forecasts)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_forecasts %>% group_by(idx) %>%
mutate(
group = cut(y_val, breaks=c(25, 50, 100),
labels=c('g1','g2','g3','g4'))
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_forecasts %>% group_by(idx) %>%
mutate(
group = cut(y_val, breaks=c(25, 50, 100),
labels=c('g1','g2','g3','g4'))
)
df_forecasts %>% group_by(idx)
df_forecasts %>% group_by(idx) %>%
mutate(
group = cut(y_val, g=4)
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group = cut(avg_infections, g=4)
)
#### 1) Import Predictions ####
df_forecasts <- read_csv(file="../Assets/Data/Evaluation/model_validation_data_forecasts_30_01.csv")
df_metrics <- read_csv(file="../Assets/Data/Evaluation/model_validation_data_metrics_30_01.csv")
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group = cut(avg_infections,
breaks = c(-Inf, 25, 50, 100, Inf),
labels= c('g1','g2','g3','g4')
)
)
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group = cut(avg_infections,
breaks = c(-Inf, 25, 50, 100, Inf),
labels= c('g1','g2','g3','g4')
)
)
#### 1) Import Predictions ####
df_forecasts <- read_csv(file="../Assets/Data/Evaluation/model_validation_data_forecasts_30_01.csv")
df_metrics <- read_csv(file="../Assets/Data/Evaluation/model_validation_data_metrics_30_01.csv")
# Rename First Column:
df_forecasts <- df_forecasts %>%
rename(
day_num = names(df_forecasts)[1]
) %>%
mutate(
day_num = day_num + 1
)
## Compute relative residuals:
df_forecasts <- df_forecasts %>% mutate(
rel_residuals_Diff_Eq_Last_Beta = residuals_Diff_Eq_Last_Beta / y_val,
rel_residuals_Diff_Eq_Ml_Beta = residuals_Diff_Eq_ML_Beta / y_val,
rel_residuals_Sarima = residuals_Sarima / y_val,
rel_residuals_ensemble = residuals_Ensemble / y_val,
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group = cut(avg_infections,
breaks = c(-Inf, 25, 50, 100, Inf),
labels= c('g1','g2','g3','g4')
)
)
#### 1) Import Predictions ####
df_forecasts <- read_csv(file="../Assets/Data/Evaluation/model_validation_data_forecasts_30_01.csv")
# Rename First Column:
df_forecasts <- df_forecasts %>%
rename(
day_num = names(df_forecasts)[1]
) %>%
mutate(
day_num = day_num + 1
)
o
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group = cut(avg_infections,
breaks = c(-Inf, 25, 50, 100, Inf),
labels= c('g1','g2','g3','g4')
)
)
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
)
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
ungroup() %
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
ungroup()
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
ungroup() %>%
mutate(
group = cut(avg_infections,
breaks = c(-Inf, 25, 50, 100, Inf),
labels= c('g1','g2','g3','g4')
)
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_avg_incidences <- df_forecasts %>% group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
) %>%
ungroup()
library(tidyverse)
library(caret)
library(GGally)
library(ggfortify)
library(scales)
library(RColorBrewer)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_avg_incidences <- df_forecasts %>% group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
) %>%
ungroup()
df_forecasts %>% group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
)
df_forecasts %>% group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
) %>%
ungroup()
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_avg_incidences <- df_forecasts %>% group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
) %>%
ungroup()
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_avg_incidences <- df_forecasts %>%
group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
) %>%
ungroup()
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_avg_incidences = df_forecasts %>%
group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
) %>%
ungroup()
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_avg_incidences <- df_forecasts %>%
group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_avg_incidences <- df_forecasts %>%
group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
)
df_forecasts %>%
group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
df_avg_incidences <- df_forecasts %>%
group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
temp <- df_forecasts %>%
group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
)
### Differentiate forecasts into three different groups based on average incidence for y_val:
df_forecasts %>% group_by(idx) %>%
summarize(
avg_infections = mean(y_val)
) %>%
mutate(
group1_avg_infections = quantile(avg_infections, 0.25),
group2_avg_infections = quantile(avg_infections, 0.50),
group3_avg_infections = quantile(avg_infections, 0.75),
) %>%
temp = df_forecasts %>%
group_by(idx) %>%
summarize(
avg_incidences = mean(y_val)
)
